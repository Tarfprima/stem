class TaskManager {
  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    this.initializeElements();
    
    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    this.setupModalWindows();
    this.setupSearchFunctionality();
    this.setupSortAndFilterFunctionality();
    this.setupDetailButtons();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
  initializeElements() {
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.modal = {
      overlay: document.getElementById('taskModal'),
      closeBtn: document.getElementById('modalCloseBtn'),
      content: document.getElementById('modalContent'),
      title: document.querySelector('.modal-task-title'),
      icon: document.querySelector('.modal-task-icon'),
      created: document.getElementById('modalCreated'),
      reminder: document.getElementById('modalReminder'),
      reminderTime: document.getElementById('modalReminderTime')
    };

    // –ü–æ–∏—Å–∫–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    this.search = {
      activeInput: document.getElementById('searchActiveTask'),
      completedInput: document.getElementById('searchCompletedTask'),
      activeCount: document.getElementById('activeResultsCount'),
      completedCount: document.getElementById('completedResultsCount')
    };

    // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    this.sort = {
      activeSelect: document.getElementById('sortActiveTask'),
      completedSelect: document.getElementById('sortCompletedTask')
    };

    // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    this.filter = {
      activeSelect: document.getElementById('filterActiveTask'),
      completedSelect: document.getElementById('filterCompletedTask')
    };

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–¥–∞—á
    this.containers = {
      active: document.querySelector('.tasks-grid[data-section="active"]'),
      completed: document.querySelector('.tasks-grid[data-section="completed"]')
    };
  }


  // === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á
  setupModalWindows() {
    if (!this.modal.overlay) return;

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
    this.modal.closeBtn?.addEventListener('click', () => this.closeModal());
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
  openModal(taskItem) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
    const title = taskItem.querySelector('.task-title')?.textContent || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const icon = taskItem.querySelector('.task-icon')?.textContent || 'üìù';
    const description = taskItem.querySelector('.task-desc')?.textContent || '';
    const createdElement = taskItem.querySelector('.task-meta small');
    const reminderElement = taskItem.querySelector('.reminder-time');
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (this.modal.title) this.modal.title.textContent = title;
    if (this.modal.icon) this.modal.icon.textContent = icon;
    if (this.modal.content) this.modal.content.textContent = description;
    if (this.modal.created && createdElement) {
      this.modal.created.textContent = createdElement.textContent.replace('–°–æ–∑–¥–∞–Ω–æ: ', '');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if (reminderElement && this.modal.reminderTime) {
      this.modal.reminderTime.textContent = reminderElement.textContent.replace('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ', '');
      this.modal.reminder.style.display = 'block';
    } else if (this.modal.reminder) {
      this.modal.reminder.style.display = 'none';
    }
    
    // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    this.modal.overlay.classList.add('show');
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  closeModal() {
    this.modal.overlay.classList.remove('show');
  }

  // === –ö–ù–û–ü–ö–ò "–ü–û–î–†–û–ë–ù–ï–ï" ===
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
  setupDetailButtons() {
    document.querySelectorAll('.task-item').forEach((taskItem) => {
      const actions = taskItem.querySelector('.task-actions');
      if (!actions) return;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
      const button = document.createElement('button');
      button.type = 'button';
      button.className = 'btn btn-toggle';
      button.textContent = '–ü–æ–¥—Ä–æ–±–Ω–µ–µ';

      button.addEventListener('click', (event) => {
        event.preventDefault();
        event.stopPropagation();
        
        this.openModal(taskItem);
      });

      actions.prepend(button);
    });
  }


  // === –§–£–ù–ö–¶–ò–û–ù–ê–õ –ü–û–ò–°–ö–ê ===
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∑–∞–¥–∞—á –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  setupSearchFunctionality() {
    // –ü–æ–∏—Å–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    if (this.search.activeInput) {
      this.search.activeInput.addEventListener('input', () => {
        this.performSearch('active', this.search.activeInput.value, this.search.activeCount);
      });
    }
    
    // –ü–æ–∏—Å–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    if (this.search.completedInput) {
      this.search.completedInput.addEventListener('input', () => {
        this.performSearch('completed', this.search.completedInput.value, this.search.completedCount);
      });
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏
  // section - —Å–µ–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ ('active' –∏–ª–∏ 'completed')
  // query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
  // countElement - —ç–ª–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  performSearch(section, query, countElement) {
    const container = this.containers[section];
    if (!container) return;

    const searchQuery = query.toLowerCase().trim();
    const taskItems = container.querySelectorAll('.task-item:not(.empty-state):not(.hidden-by-filter)');
    
    let visibleCount = 0;
    const totalCount = taskItems.length;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    taskItems.forEach(taskItem => {
      const title = taskItem.querySelector('.task-title');
      const titleText = title?.textContent.toLowerCase() || '';
      
      const isMatch = !searchQuery || titleText.includes(searchQuery);
      
      taskItem.classList.toggle('hidden-by-search', !isMatch);
      if (isMatch) visibleCount++;
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.updateResultsCount(countElement, searchQuery, visibleCount);
  }


  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  // countElement - —ç–ª–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞
  // query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
  // count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  updateResultsCount(countElement, query, count) {
    if (!countElement) return;

    if (!query) {
      countElement.textContent = '';
      return;
    }

    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    const getResultWord = (num) => {
      if (num === 1) return '—Ä–µ–∑—É–ª—å—Ç–∞—Ç';
      if (num >= 2 && num <= 4) return '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞';
      return '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤';
    };

    countElement.textContent = `${count} ${getResultWord(count)}`;
  }

  // === –§–£–ù–ö–¶–ò–û–ù–ê–õ –°–û–†–¢–ò–†–û–í–ö–ò –ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò ===
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
  setupSortAndFilterFunctionality() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    if (this.sort.activeSelect) {
      this.sort.activeSelect.addEventListener('change', (event) => {
        this.sortTasks('active', event.target.value);
      });
    }
    if (this.filter.activeSelect) {
      this.filter.activeSelect.addEventListener('change', (event) => {
        this.filterTasks('active', event.target.value);
      });
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    if (this.sort.completedSelect) {
      this.sort.completedSelect.addEventListener('change', (event) => {
        this.sortTasks('completed', event.target.value);
      });
    }
    if (this.filter.completedSelect) {
      this.filter.completedSelect.addEventListener('change', (event) => {
        this.filterTasks('completed', event.target.value);
      });
    }
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏
  // section - —Å–µ–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ('active' –∏–ª–∏ 'completed')
  // sortOrder - –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ('default', 'date-asc', 'date-desc')
  sortTasks(section, sortOrder) {
    const container = this.containers[section];
    if (!container || sortOrder === 'default') return;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ (–∫—Ä–æ–º–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    const taskItems = Array.from(container.querySelectorAll('.task-item:not(.empty-state)'));
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    taskItems.sort((taskA, taskB) => {
      const dateA = this.getTaskDateString(taskA);
      const dateB = this.getTaskDateString(taskB);
      
      return sortOrder === 'date-asc' ? dateA.localeCompare(dateB) : dateB.localeCompare(dateA);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const emptyState = container.querySelector('.empty-state');
    
    // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';
    taskItems.forEach(item => container.appendChild(item));
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (emptyState && taskItems.length === 0) {
      container.appendChild(emptyState);
    }

    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
    const searchInput = section === 'active' ? this.search.activeInput : this.search.completedInput;
    if (searchInput?.value.trim()) {
      searchInput.dispatchEvent(new Event('input'));
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  // taskItem - –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD HH:MM" –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  getTaskDateString(taskItem) {
    const metaElement = taskItem.querySelector('.task-meta small');
    if (!metaElement) return '0000-00-00 00:00';
    
    const dateText = metaElement.textContent;
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const match = dateText.match(/(\d{2})\.(\d{2})\.(\d{4})\s*(\d{2}):(\d{2})/);
    
    if (match) {
      const [, day, month, year, hours, minutes] = match;
      return `${year}-${month}-${day} ${hours}:${minutes}`;
    }
    
    return '0000-00-00 00:00'; // –î–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }


  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ —Ç–∏–ø—É
  // section - —Å–µ–∫—Ü–∏—è ('active' –∏–ª–∏ 'completed')  
  // filterType - —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ ('all', 'notes', 'reminders')
  filterTasks(section, filterType) {
    const container = this.containers[section];
    if (!container) return;

    // –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º
    container.querySelectorAll('.task-item:not(.empty-state)').forEach(taskItem => {
      const showTask = filterType === 'all' || 
                       (filterType === 'notes' && taskItem.classList.contains('note')) ||
                       (filterType === 'reminders' && taskItem.classList.contains('reminder'));
      
      taskItem.classList.toggle('hidden-by-filter', !showTask);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
    const searchInput = section === 'active' ? this.search.activeInput : this.search.completedInput;
    if (searchInput?.value.trim()) {
      searchInput.dispatchEvent(new Event('input'));
    }
  }
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
  try {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á (–∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å—é —Å–∏—Å—Ç–µ–º—É)
    window.taskManager = new TaskManager();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TaskManager:', error);
  }
});